AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: OTEB API

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 5
    MemorySize: 128
    Runtime: nodejs14.x
    Environment:
      Variables:
        TABLE_NAME: !Ref Table
    Architectures:
      - x86_64
    Layers:
      # Our own layer that we are going to build
      - !Ref RuntimeDependenciesLayer
      # At the same time we can also reference third-party layers
      - !Sub "arn:${AWS::Partition}:lambda:${AWS::Region}:464622532012:layer:Datadog-Node14-x:48"

Resources:
  Table:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  WelcomeFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      Timeout: 3
      CodeUri: dist/welcome/
      Handler: app.lambdaHandler
      Events:
        Welcome:
          Type: Api
          Properties:
            Path: /
            Method: get

  CreateUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/user/
      Handler: create-user.lambdaHandler
      Policies: AmazonDynamoDBFullAccess
      Events:
        CreateUser:
          Type: Api
          Properties:
            Path: /user
            Method: post

  GetUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/user/
      Handler: get-user.lambdaHandler
      Policies: AmazonDynamoDBReadOnlyAccess
      Events:
        GetUser:
          Type: Api
          Properties:
            Path: /user/{id}
            Method: get

  GetUsersFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/user/
      Handler: get-users.lambdaHandler
      Policies: AmazonDynamoDBReadOnlyAccess
      Events:
        GetUsers:
          Type: Api
          Properties:
            Path: /user
            Method: get

  UpdateUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/user/
      Handler: update-user.lambdaHandler
      Policies: AmazonDynamoDBFullAccess
      Events:
        UpdateUser:
          Type: Api
          Properties:
            Path: /user/{id}
            Method: put

  DeleteUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/user/
      Handler: delete-user.lambdaHandler
      Policies: AmazonDynamoDBFullAccess
      Events:
        DeleteUser:
          Type: Api
          Properties:
            Path: /user/{id}
            Method: delete

  RuntimeDependenciesLayer:
    Type: AWS::Serverless::LayerVersion
    Metadata:
      BuildMethod: makefile # This does the trick
    Properties:
      Description: Runtime dependencies for Lambdas
      ContentUri: ./
      CompatibleRuntimes:
        - nodejs14.x
      RetentionPolicy: Retain

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  WelcomeApi:
    Description: "API Gateway endpoint URL for Prod stage for Welcome Function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
  WelcomeFunction:
    Description: "Welcome Lambda Function ARN"
    Value: !GetAtt WelcomeFunction.Arn
  WelcomeFunctionIamRole:
    Description: "Implicit IAM Role created for Welcome Function"
    Value: !GetAtt WelcomeFunctionRole.Arn
